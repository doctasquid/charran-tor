#ground num[4].
#ground count[3].

% creating input variables
 num[N] :: #ground input[1..N].
%precision of the counter (uint32 at first)
#ground pre[4]. 
pre[Pre]:: #ground enumpre[1..Pre].
enumpre[P]:: #ground var[counter(1,P)]. 


% encoding the count into binary
count[K]:: #ground max[1,K #mod 2, K/2].
enumpre[I], I > 1, max[I-1,J,Kp]:: #ground max[I,Kp #mod 2, Kp/2].

:: enumpre[D] ::  var[comparator(D)].

% encoding the count into binary
count[K]:: #ground max[1,K #mod 2, K/2].
enumpre[I], I > 1, max[I-1,J,Kp]:: #ground max[I,Kp #mod 2, Kp/2].

%#ground clause[ground(1),neg,counter(1,1)].
%#ground clause[ground(2),neg,counter(1,2)].
%#ground clause[ground(3),neg,counter(1,3)].
%#ground clause[ground(4),neg,counter(1,4)].

% we consider the first number. 
% there is only one arrangement (1 0) which will violate <= so
% we force the implication for that case
max[1,0,R]:: #ground clause[ncompareinit(1),neg,comparator(1)].
max[1,0,R]:: #ground clause[ncompareinit(1),neg,counter(1,1)].

max[1,0,R]:: #ground clause[pcompareinit(1),pos,comparator(1)].
max[1,0,R]:: #ground clause[pcompareinit(1),pos,counter(1,1)].


max[1,1,R]:: #ground clause[compareinit(1),pos,comparator(1)].

% we consider the remaining cases now

max[D,1,R], enumpre[D], D > 1:: #ground clause[ncompare1(D),pos,comparator(D-1)].
max[D,1,R], enumpre[D], D > 1:: #ground clause[ncompare1(D),neg,counter(1,D)].
max[D,1,R], enumpre[D], D > 1:: #ground clause[ncompare1(D),neg,comparator(D)].

max[D,1,R], enumpre[D], D > 1:: #ground clause[pcompare1d(D),neg,counter(1,D)].
max[D,1,R], enumpre[D], D > 1:: #ground clause[pcompare1d(D),pos,comparator(D)].

max[D,1,R], enumpre[D], D > 1:: #ground clause[pcompare1p(D),pos,comparator(D - 1)].
max[D,1,R], enumpre[D], D > 1:: #ground clause[pcompare1p(D),pos,comparator(D)].

max[D,0,R], enumpre[D], D > 1:: #ground clause[ncompare0d(D),neg,counter(1,D)].
max[D,0,R], enumpre[D], D > 1:: #ground clause[ncompare0d(D),neg,comparator(D)].

max[D,0,R], enumpre[D], D > 1:: #ground clause[ncompare0p(D),pos,comparator(D - 1)].
max[D,0,R], enumpre[D], D > 1:: #ground clause[ncompare0p(D),neg,comparator(D)].

max[D,0,R], enumpre[D], D > 1:: #ground clause[pcompare0(D),neg,comparator(D-1)].
max[D,0,R], enumpre[D], D > 1:: #ground clause[pcompare0(D),pos,counter(1,D)].
max[D,0,R], enumpre[D], D > 1:: #ground clause[pcompare0(D),pos,comparator(D)].



% last the check to check if its actually less than :)
pre[P]:: #ground clause[check,pos,comparator(P)]. 

%checking variables and clauses generated
var[V] :: #exists[0] var(V).
clause[K,P,X] :: #ground clausel[K].
clausel[K]:: clause[K,pos,X]: var(X) | clause[K,neg,X]: ~var(X).

